# Graph Construction
Construct a directed graph \( G = (V, E) \) where \( V \) represents the set of vertices and \( E \) represents the set of directed edges.

- Add a new vertex if it doesn't already exist.
- Weighted Sum vs Themis
  - The graph construction in FairGrove is different from Themis. In Themis, all honest nodes(sequencers in FairGrove) share the same set of transactions(vertices in graph). However, FairGrove does not assume the same set of transactions between sequencers. Therefore, the modified rule of constructing graph should be applied. 
- Add an edge if it's not already present. Each edge has its own weight. If an edge with the opposite direction exists, replace it with the new edge.
  - For instance, if there's an edge \((a, b)\) going from vertex \(a\) to \(b\), and you encounter \((b, a)\), remove the existing edge and take no action.
  - If you identify another edge between vertices \(a\) and \(b\), add it.
- vertex가 완전히 공유되지 않는데 차이

# Identifying Strongly Connected Components (SCCs) and Building a Condensation Graph
After constructing the graph, identify its strongly connected components using algorithms like Kosaraju's or Tarjan's. Keep in mind that there could be isolated vertices not connected to any others.

- Utilize algorithms like Kosaraju's or Tarjan's to partition the graph into strongly connected components.
- Create a new graph, often referred to as the "condensation graph" or "meta-graph," where each strongly connected component from the previous step is treated as a single vertex.
- While making a condensation graph, there can be some disconnected graphs. If the sequencer only accepts one single transaction and the transaction is not sent to any sequencers, then it is a single SCC and has no edge with other vertices. This is unlikely happened, too subtle to consider. Therefore, FairGrove ignores SCC that is completely disconnected with main graph. The main graph is determined by the number of vertices. 

# Topological Sorting of the Condensation Graph
Perform a topological sort on the condensation graph from the previous step. Since the condensation graph is constructed to be a Directed Acyclic Graph (DAG), you can apply standard topological sorting algorithms.

The obtained order will dictate the sequence in which the strongly connected components should be processed.

# Pre-Final Sequence: Processing Vertices within SCCs (prior to the MEV-policy)
For each strongly connected component identified in the initial step, process the vertices within that component in any desired order. This stage is not constrained by cycles, as all vertices within the same SCC are mutually reachable.

# Final Sequence
Complete the process by publishing the outcomes. You're now done!

Your organized approach involves constructing the graph, identifying SCCs, sorting the condensation graph, processing vertices, and finally achieving the desired outcome.